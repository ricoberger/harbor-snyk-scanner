# Default values for harbor-snyk-scanner.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

replicaCount: 1

## Set the image which should be used for the scanner.
##
image:
  repository: ricoberger/harbor-snyk-scanner
  tag: v0.1.0
  pullPolicy: IfNotPresent

## Specify additional labels and annotations for the Deployment, Pods and Service.
##
annotations: {}
labels: {}

## Specify additional environment variables.
##
env: []
  ## For example the following can be used to set the API key for Snyk. In this example we are using the "SNYK_API_KEY"
  ## key from a secret named "harbor-snyk-scanner" (must be created manually) to set the "SNYK_API_KEY" environment
  ## variable.
  ##
  # - name: SNYK_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: harbor-snyk-scanner
  #       key: SNYK_API_KEY

settings:
  snykIntegrationID:
  snykOrganisationID:
  logFormat: console
  logLevel: info

## Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the ricoberger/harbor-snyk-scanner
## image from a private registry.
## See: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets: []

## Specify security settings for the created Pods. To set the security settings for the Container use the corresponding
## "securityContext" field.
## See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
##
podSecurityContext: {}
  # fsGroup: 2000

## Specify security settings for the scanner Container. They override settings made at the Pod level via the
## "podSecurityContext" when there is overlap.
## See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
##
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## We usually recommend not to specify default resources and to leave this as a conscious choice for the user. This
## also increases chances charts run on environments with little resources, such as Minikube. If you do want to
## specify resources, uncomment the following lines, adjust them as necessary, and remove the curly braces after
## 'resources:'.
##
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## Specify a map of key-value pairs, to assign the Pods to a specific set of nodes.
## See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
##
nodeSelector: {}

## Specify the tolerations for the scanner Pods.
## See: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
##
tolerations: []

## Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the scanner Pods.
## See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}
